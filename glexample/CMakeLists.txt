project(glexample)

set(${PROJECT_NAME}_VERSION_MAJOR 0)
set(${PROJECT_NAME}_VERSION_MINOR 1)
set(${PROJECT_NAME}_VERSION_PATCH 0)
set(PROJECT_VERSION ${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}-${${PROJECT_NAME}_VERSION_PATCH})
message(STATUS "${PROJECT_NAME} v${PROJECT_VERSION}")

set(CMAKE_VERBOSE_MAKEFILE ON)

find_package(LibEpoxy REQUIRED)
find_package(glfw3 3.3 REQUIRED)
find_package(OpenGL REQUIRED)
find_package(glm REQUIRED)
find_package(Threads REQUIRED)

#todo: check what will happen when path contains spaces

set(${PROJECT_NAME}_PUBLIC_HEADERS  "${CMAKE_CURRENT_SOURCE_DIR}/include")
set(${PROJECT_NAME}_PRIVATE_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/lib/include")
set(${PROJECT_NAME}_PRIVATE_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/lib/src")

file(GLOB_RECURSE  ${PROJECT_NAME}_PUBLIC_HEADERS_LIST
#        RELATIVE ${${PROJECT_NAME}_PUBLIC_HEADERS}
                 ${${PROJECT_NAME}_PUBLIC_HEADERS}/*
        )
file(GLOB_RECURSE  ${PROJECT_NAME}_PRIVATE_HEADERS_LIST
#        RELATIVE ${${PROJECT_NAME}_PRIVATE_HEADERS}
                 ${${PROJECT_NAME}_PRIVATE_HEADERS}/*
        )
file(GLOB_RECURSE  ${PROJECT_NAME}_PRIVATE_SOURCES_LIST
#        RELATIVE ${${PROJECT_NAME}_PRIVATE_SOURCES}
                 ${${PROJECT_NAME}_PRIVATE_SOURCES}/*
        )

file(GLOB_RECURSE  ${PROJECT_NAME}_PUBLIC_HEADERS_LIST_RELATIVE
        RELATIVE ${${PROJECT_NAME}_PUBLIC_HEADERS}
                 ${${PROJECT_NAME}_PUBLIC_HEADERS}/*
        )
file(GLOB_RECURSE  ${PROJECT_NAME}_PRIVATE_HEADERS_LIST_RELATIVE
        RELATIVE ${${PROJECT_NAME}_PRIVATE_HEADERS}
                 ${${PROJECT_NAME}_PRIVATE_HEADERS}/*
        )
file(GLOB_RECURSE  ${PROJECT_NAME}_PRIVATE_SOURCES_LIST_RELATIVE
        RELATIVE ${${PROJECT_NAME}_PRIVATE_SOURCES}
                 ${${PROJECT_NAME}_PRIVATE_SOURCES}/*
        )

#message(STATUS "${CMAKE_CURRENT_SOURCE_DIR}: ${CMAKE_CURRENT_SOURCE_DIR}")
#message(STATUS "\${${PROJECT_NAME}_PUBLIC_HEADERS}: ${${PROJECT_NAME}_PUBLIC_HEADERS}")
#message(STATUS "\${${PROJECT_NAME}_PUBLIC_HEADERS_LIST}: ${${PROJECT_NAME}_PUBLIC_HEADERS_LIST}")
#message(STATUS "\${${PROJECT_NAME}_PRIVATE_HEADERS}: ${${PROJECT_NAME}_PRIVATE_HEADERS}")
#message(STATUS "\${${PROJECT_NAME}_PRIVATE_HEADERS_LIST}: ${${PROJECT_NAME}_PRIVATE_HEADERS_LIST}")
#message(STATUS "\${${PROJECT_NAME}_PRIVATE_SOURCES}: ${${PROJECT_NAME}_PRIVATE_SOURCES}")
#message(STATUS "\${${PROJECT_NAME}_PRIVATE_SOURCES_LIST}: ${${PROJECT_NAME}_PRIVATE_SOURCES_LIST}")

add_library(${PROJECT_NAME} SHARED ${${PROJECT_NAME}_PRIVATE_SOURCES_LIST})
target_include_directories(${PROJECT_NAME}
        PRIVATE ${${PROJECT_NAME}_PRIVATE_HEADERS}
        PUBLIC $<BUILD_INTERFACE:${${PROJECT_NAME}_PUBLIC_HEADERS}>
               $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}-${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}>
        )
target_compile_options(${PROJECT_NAME} PUBLIC
        -O0
        -g3
        -ggdb3
        -Wall
        -Werror
        -Wpedantic
        -Wno-error=unused-function
        )
target_link_libraries(${PROJECT_NAME} PUBLIC
        glfw
        GL
        ${OPENGL_gl_LIBRARY}
        epoxy
        glm
        Threads::Threads
        )

message(STATUS "\${CMAKE_INSTALL_BINDIR}: ${CMAKE_INSTALL_BINDIR}")
message(STATUS "\${CMAKE_INSTALL_LIBDIR}: ${CMAKE_INSTALL_LIBDIR}")

# Create CMake script
install(TARGETS ${PROJECT_NAME}
        EXPORT ${PROJECT_NAME}-targets
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        )
# Export it
install(EXPORT ${PROJECT_NAME}-targets
        NAMESPACE ${PROJECT_NAME}::
        FILE ${PROJECT_NAME}Config.cmake
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
        )
# Install public headers
install()

include(CPack)

#add_subdirectory(test)
